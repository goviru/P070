# -*- coding: utf-8 -*-
"""Predicta_Competition_Q_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JrKnh9b3UF6UI1inZU7LQadhr9cRqXLl
"""

import pandas as pd

# Load historical weather data
historical_weather = pd.read_csv('/content/historical_weather.csv (1).zip')

# Inspect the data
print(historical_weather.head())
print(historical_weather.info())

# Handle missing values by forward filling
historical_weather.fillna(method='ffill', inplace=True)

# Convert date to datetime
historical_weather['date'] = pd.to_datetime(historical_weather['date'])

# Extract month and day from the date
historical_weather['month'] = historical_weather['date'].dt.month
historical_weather['day'] = historical_weather['date'].dt.day

print(historical_weather['month'].head())
print(historical_weather['day'].head())

import matplotlib.pyplot as plt
import seaborn as sns

# Plot average temperature trends over time
plt.figure(figsize=(15, 6))
sns.lineplot(data=historical_weather, x='date', y='avg_temp_c', hue='city_id', legend=None)
plt.title('Average Temperature Trends')
plt.show()

# Plot distribution of average temperatures
plt.figure(figsize=(12, 6))
sns.histplot(historical_weather['avg_temp_c'], bins=50, kde=True)
plt.title('Distribution of Average Temperatures')
plt.show()

from sklearn.impute import SimpleImputer #When working with real-world data, it's common to encounter missing values. These missing values can disrupt the performance of machine learning models. The SimpleImputer helps by replacing the missing values with a meaningful value based on the specified imputation strategy.
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

imputer = SimpleImputer(strategy='mean')
historical_weather[['min_temp_c', 'max_temp_c', 'precipitation_mm', 'snow_depth_mm', 'avg_wind_dir_deg', 'avg_wind_speed_kmh']] = imputer.fit_transform(
    historical_weather[['min_temp_c', 'max_temp_c', 'precipitation_mm', 'snow_depth_mm', 'avg_wind_dir_deg', 'avg_wind_speed_kmh']]
)


# Train-validation split
train_data = historical_weather[historical_weather['date'] < '2018-06-30']
val_data = historical_weather[historical_weather['date'] >= '2018-06-30']

# Define features and target
features = ['min_temp_c', 'max_temp_c', 'precipitation_mm', 'snow_depth_mm', 'avg_wind_dir_deg', 'avg_wind_speed_kmh', 'month', 'day']
X_train = train_data[features]
y_train = train_data['avg_temp_c']
X_val = val_data[features]
y_val = val_data['avg_temp_c']

# Train RandomForest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_val)
rmse = np.sqrt(mean_squared_error(y_val, y_pred))
print(f'Validation Root Mean Squared Error: {rmse}')

# Load submission key
submission_key = pd.read_csv('/content/submission_key (2).csv')

# Prepare predictions
predictions = []

for idx, row in submission_key.iterrows():
    city_id = row['city_id']
    date = pd.to_datetime(row['date'])
    month = date.month
    day = date.day

    # Select features for prediction
    X_test = historical_weather[(historical_weather['city_id'] == city_id) & (historical_weather['month'] == month) & (historical_weather['day'] == day)]

    if not X_test.empty:
        X_test = X_test[features]  # Ensure columns and order are the same as in training
        pred_temp = model.predict(X_test)
        predictions.append([row['submission_ID'], pred_temp[0]])
    else:
        # Fallback if no data available
        pred_temp = historical_weather[historical_weather['city_id'] == city_id]['avg_temp_c'].mean()
        predictions.append([row['submission_ID'], pred_temp])

# Create submission DataFrame
submission = pd.DataFrame(predictions, columns=['submission_ID', 'avg_temp_c'])

# Load sample submission to ensure the format
sample_submission = pd.read_csv('/content/sample_submission (3).csv')

# Merge predictions with sample submission to ensure the order and format are correct
final_submission = sample_submission[['submission_ID']].merge(submission, on='submission_ID', how='left')

# Save to CSV
final_submission.to_csv('sample_submission.csv', index=False)

# Download the file
from google.colab import files
files.download('sample_submission.csv')
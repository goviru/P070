# -*- coding: utf-8 -*-
"""Predicta_Competition_1.0_Q_02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19TAvUqMG4WOdlqClPY8hGj4aRuptVOiY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load daily weather data
daily_data = pd.read_csv('/daily_data.csv')

# Inspect the data
print(daily_data.head())
print(daily_data.info())

# Handle missing values by forward filling
daily_data.fillna(method='ffill', inplace=True)

# Define the 9 weather condition types
condition_types = [
    "Clear and Sunny",
    "Partly Cloudy",
    "Light Precipitation",
    "Cloudy and Overcast",
    "Mist or Fog",
    "Rain Showers",
    "Light Rain with Thunder",
    "Thunderstorms",
    "Moderate to Heavy Rain"
]

# Encode categorical target variable to numerical
label_encoder = LabelEncoder()
daily_data['condition_text'] = label_encoder.fit_transform(daily_data['condition_text'])

# Plot distribution of weather conditions
plt.figure(figsize=(12, 6))
sns.countplot(x='condition_text', data=daily_data)
plt.title('Distribution of Weather Conditions')
plt.show()

# Define features and target
features = ['temperature_celsius', 'wind_kph', 'wind_degree', 'pressure_mb', 'precip_mm', 'humidity', 'cloud', 'feels_like_celsius', 'visibility_km', 'uv_index', 'gust_kph', 'air_quality_us-epa-index']
X = daily_data[features]
y = daily_data['condition_text']

# Convert day_id to integer for proper comparison
daily_data['day_id'] = daily_data['day_id'].apply(lambda x: int(x[1:]))

# Train-validation split
train_data = daily_data[daily_data['day_id'] < 365 * 4]  # Use first four years for training
val_data = daily_data[daily_data['day_id'] >= 365 * 4]   # Use the fifth year for validation

X_train = train_data[features]
y_train = train_data['condition_text']
X_val = val_data[features]
y_val = val_data['condition_text']

# Train RandomForest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print(f'Validation Accuracy: {accuracy}')

# Load submission data
submission = pd.read_csv('/submission .csv')

# Prepare predictions
predictions = []

for idx, row in submission.iterrows():
    day_id = int(row['day_id'][1:])  # Convert day_id to integer by stripping 'D'

    # Select features for prediction
    X_test = daily_data[daily_data['day_id'] == day_id]

    if not X_test.empty:
        X_test = X_test[features]  # Ensure columns and order are the same as in training
        pred_condition = model.predict(X_test)
        predictions.append([row['day_id'], label_encoder.inverse_transform(pred_condition)[0]])
    else:
        # Fallback if no data available
        pred_condition = 'Unknown'
        predictions.append([row['day_id'], pred_condition])

# Create submission DataFrame
submission_df = pd.DataFrame(predictions, columns=['day_id', 'condition_text'])

# Save to CSV
submission_df.to_csv('submission.csv', index=False)

# Download the file
from google.colab import files
files.download('submission.csv')